<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:context="http://www.springframework.org/schema/context" xmlns:cxf="http://camel.apache.org/schema/cxf"
	xmlns:jaxrs="http://cxf.apache.org/jaxrs"
	xsi:schemaLocation="
       http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
       http://camel.apache.org/schema/cxf http://camel.apache.org/schema/cxf/camel-cxf.xsd
       http://cxf.apache.org/jaxrs http://cxf.apache.org/schemas/jaxrs.xsd
       http://camel.apache.org/schema/spring http://camel.apache.org/schema/spring/camel-spring.xsd
       ">
   <bean id="initChannelBatchRoute" class="com.sellinall.lazada.init.InitChannelBatchRoute" />
   <bean id="initBatchRequest" class="com.sellinall.lazada.init.InitBatchRequest" />
   <bean id="initSKUMap" class="com.sellinall.lazada.init.InitSKUMap" />
   <bean id="prepareBatchMessage" class="com.sellinall.lazada.message.PrepareBatchMessage" />
   <bean id="constructBatchMessage" class="com.sellinall.lazada.message.ConstructBatchMessage" />
   <bean id="splitterBeanForSKUMap" class="com.sellinall.lazada.splitter.SplitterBeanForSKUMap" />
   <bean id="skuMapAggregator" class="com.sellinall.lazada.splitter.SKUMapAggregator" />
   <bean id="prepareBatchMessageForStatusUpdate" class="com.sellinall.lazada.message.PrepareBatchMessageForStatusUpdate" />
   <bean id="loadAvailableSKUBySellerSKU" class="com.sellinall.lazada.db.LoadAvailableSKUBySellerSKU" />
   <bean id="constructMessageForStatusUpdate" class="com.sellinall.lazada.message.ConstructMessageForStatusUpdate"/>
   <bean id="constructPriceUpdateBatchMessage" class="com.sellinall.lazada.message.ConstructPriceUpdateBatchMessage"/>
   <bean id="updateItemPriceToInventory" class="com.sellinall.lazada.db.UpdateItemPriceToInventory"/>
   <bean id="submitBulkPriceUpdateRequest" class="com.sellinall.lazada.requests.SubmitBulkPriceUpdateRequest"/>
   <bean id="initPriceUpdateBySellerSKU" class="com.sellinall.lazada.init.InitPriceUpdateBySellerSKU"/>
   <bean id="loadInventoryBySellerSKU" class="com.sellinall.lazada.db.LoadInventoryBySellerSKU"/>
   <bean id="initBulkPriceUpdate" class="com.sellinall.lazada.init.InitBulkPriceUpdate"/>

   <bean id="insertStatusUpdateDocInDB" class="com.sellinall.lazada.db.InsertStatusUpdateDocInDB"/>
   <bean id="loadBatchStatusUpdateFeeds" class="com.sellinall.lazada.db.LoadBatchStatusUpdateFeeds" />
   <bean id="loadInventoryWithSellerSKU" class="com.sellinall.lazada.db.LoadInventoryWithSellerSKU" />
   <bean id="initUpdateStatusRequest" class="com.sellinall.lazada.init.InitUpdateStatusRequest" />
   <bean id="submitStatusUpdateRequest" class="com.sellinall.lazada.requests.SubmitStatusUpdateRequest" />
   <bean id="constructCustomSKUNotFound" class="com.sellinall.lazada.requests.ConstructCustomSKUNotFound" />
   <bean id="constructCustomSKUBatchMessage" class="com.sellinall.lazada.requests.ConstructCustomSKUBatchMessage" />
   <bean id="prepareNotFoundBatchMessage" class="com.sellinall.lazada.message.PrepareNotFoundBatchMessage" />
   <bean id="processUpdateChildStatus" class="com.sellinall.lazada.requests.ProcessUpdateChildStatus" />
   <bean id="updateIndividualSKUDBQuery" class="com.sellinall.lazada.db.UpdateIndividualSKUDBQuery" />
   <bean id="checkIsEligibleToUpdateParentStatus" class="com.sellinall.lazada.db.CheckIsEligibleToUpdateParentStatus" />
   <bean id="updateDeactivateStatusInDB" class="com.sellinall.lazada.db.UpdateDeactivateStatusInDB" />

   <bean id="loadStockUpdateFeeds" class="com.sellinall.lazada.db.loadStockUpdateFeeds" />
   <bean id="loadInventoryForStockUpdate" class="com.sellinall.lazada.db.LoadInventoryForStockUpdate" />
   <bean id="initBulkStockUpdateByPage" class="com.sellinall.lazada.init.InitBulkStockUpdateByPage" />
   <bean id="initUpdateSKUDBQuery" class="com.sellinall.lazada.init.InitUpdateSKUDBQuery" />
   <bean id="submitQuantityUpdateRequest" class="com.sellinall.lazada.requests.SubmitQuantityUpdateRequest" />
   <bean id="initPublishEventsToJournal" class="com.sellinall.lazada.init.InitPublishEventsToJournal" />
   <bean id="initCountryBasedInventories" class="com.sellinall.lazada.init.InitCountryBasedInventories" />

   <!-- this is an included XML file where we only the the routeContext -->
    <routeContext id="batchProcessorRoutes" xmlns="http://camel.apache.org/schema/spring">
        <route id="batchAddItem">
            <from uri="direct:batchAddItem"/>
            <process ref="initChannelBatchRoute"/>
            <choice>
            	<when>
            	    <simple>${exchangeProperty.isStatusUpdate} == true</simple>
            	    <setProperty propertyName="needToUpdateStock">
            	        <simple>true</simple>
            	    </setProperty>
            	    <to uri="direct:insertStatusUpdateRequestInDB" />
            	</when>
            	<otherwise>
            	    <process ref="initBatchRequest"/>
            	    <split parallelProcessing="true" strategyRef="skuMapAggregator">
            	        <method ref="splitterBeanForSKUMap" method="splitSKUMap" />
            	        <process ref="initSKUMap"/>
            	        <to uri="direct:postToChannel" />
            	    </split>
            	</otherwise>
            </choice>
        </route>

        <route id="insertStatusUpdateRequestInDB">
            <from uri="direct:insertStatusUpdateRequestInDB" />
            <setProperty propertyName="bulkUpdateType">
				<simple>status</simple>
            </setProperty>
            <process ref="insertStatusUpdateDocInDB" />
        </route>

		<route id="updateInventoryStatus">
			<from uri="direct:updateInventoryStatus" />
			<process ref="loadAvailableSKUBySellerSKU" />
			<loop>
				<simple>${exchangeProperty.skuListToProcess.size}</simple>
				<process ref="constructMessageForStatusUpdate" />
				<to uri="direct:postToChannel" />
			</loop>
			<when>
				<simple> ${exchangeProperty.requestType} == 'batchEditItem'</simple>
				<process ref="prepareBatchMessageForStatusUpdate" />
				<to uri="direct:publishMessageToBatch"/>
			</when>
		</route>
		
		<route id="publishMessageToBatch">
			<from uri="direct:publishMessageToBatch"/>
			<process ref="constructBatchMessage" />
			<to uri="direct:publishMessage"/>
		</route>
		
		<route id="publishMessage">
			<from uri="direct:publishMessage"/>
			<setHeader headerName="rabbitmq.ROUTING_KEY">
				<constant>batchProcessorKey</constant>
			</setHeader>
			<setHeader headerName="rabbitmq.DELIVERY_MODE">
				<constant>2</constant>
			</setHeader>
			<convertBodyTo type="java.lang.String" />
			<to
				uri="rabbitmq://{{batchProcessor.host}}:{{batchProcessor.tx.port}}/batchProcessorExchange?connectionFactory=#txbatchProcessorFactory&amp;exchangeType=topic&amp;autoDelete=false&amp;durable=true&amp;declare=false" />
		</route>

		<route id="batchVerifyAddItem">
			<from uri="direct:batchVerifyAddItem" />
			<process ref="initChannelBatchRoute" />
			<process ref="initBatchRequest" />
			<split parallelProcessing="true" strategyRef="skuMapAggregator">
				<method ref="splitterBeanForSKUMap" method="splitSKUMap" />
				<process ref="initSKUMap" />
				<to uri="direct:loadInventories" />
			</split>
		</route>
		<route id="loadInventories" >
			<from uri="direct:loadInventories" />
			<split parallelProcessing="true">
				<method ref="splitterBean" method="splitNickNames" />
				<to uri="direct:loadData" />
				<to uri="direct:validateItems" />
			</split>
		</route>
		<route id="validateItems">
			<from uri="direct:validateItems" />
			<process ref="initializePostRoute" />
			<to uri="direct:validateRequirementAddItem" />
			<process ref="prepareBatchMessage" />
			<split parallelProcessing="true">
				<simple>${body}</simple>
				<to uri="direct:publishMessageToBatch" />
			</split>
			<setBody>
				<simple>${exchangeProperty.inventoryDetails}</simple>
			</setBody>
			<split parallelProcessing="true">
				<simple>${body}</simple>
				<process ref="updateSKUIndividualStatus" />
				<to uri="mongodb:mongoInventoryBean?database={{mongo.inventory.database}}&amp;collection=inventory&amp;operation=update" />
			</split>
		</route>
		<route id="prepareBatchMessage">
			<from uri="direct:prepareBatchMessage"/>
			<process ref="prepareBatchMessage" />
			<split parallelProcessing="true">
				<simple>${body}</simple>
				<to uri="direct:publishMessageToBatch" />
			</split>
		</route>

		<route id="bulkPriceUpdate">
			<from uri="direct:bulkPriceUpdate" />
			<process ref="initBulkPriceUpdate" />
			<process ref="loadUserDataByNicknameId" />
			<doTry>
				<when>
					<simple>${exchangeProperty.getAccessToken} == true</simple>
					<to uri="direct:getAccessToken" />
				</when>
				<process ref="loadInventoryBySellerSKU" />
				<process ref="initPriceUpdateBySellerSKU" />
				<when>
					<simple>${exchangeProperty.payloadList.size} > 0</simple>
					<to uri="freemarker:classpath:templates/UpdateBulkPriceUpdate.ftl?contentCache=true" />
					<process ref="submitBulkPriceUpdateRequest" />
				</when>
			<doCatch>
					<exception>java.lang.Exception</exception>
					<exception>org.codehaus.jettison.json.JSONException</exception>
					<setHeader headerName="bulkPriceException">
						<simple>${exception.stacktrace}</simple>
					</setHeader>
					<process ref="handleException" />
				</doCatch>
			</doTry>
			<process ref="updateItemPriceToInventory" />
			<to uri="direct:publishPriceUpdateMessageToBatch" />
		</route>

		<route id="publishPriceUpdateMessageToBatch">
			<from uri="direct:publishPriceUpdateMessageToBatch" />
			<process ref="constructPriceUpdateBatchMessage" />
			<to uri="direct:publishMessage" />
		</route>

		<route id="bulkStockUpdateByPage">
			<from uri="direct:bulkStockUpdateByPage" />
			<loop doWhile="true">
				<simple>${exchangeProperty.isLastPage} == false</simple>
				<process ref="initBulkStockUpdateByPage" />
				<to uri="freemarker:classpath:templates/UpdateQuantityRequest.ftl?contentCache=true" />
				<process ref="submitQuantityUpdateRequest" />
				<split parallelProcessing="true">
					<simple>${exchangeProperty.inventoryDataMap.values}</simple>
					<process ref="initUpdateSKUDBQuery" />
					<process ref="updateSKUDBQuery" />
					<to uri="mongodb:mongoInventoryBean?database={{mongo.inventory.database}}&amp;collection=inventory&amp;operation=update" />
					<process ref="initPublishEventsToJournal" />
					<to uri="direct:publishEventsToJournal" />
					<when>
						<simple>${exchangeProperty.isAutoStatusUpdate} == true || 
							${exchangeProperty.isPartialAutoStatusUpdate} == false</simple>
						<setProperty propertyName="bulkUpdateType">
							<simple>stock</simple>
						</setProperty>
						<process ref="insertStatusUpdateDocInDB" />
					</when>
				</split>
			</loop>
		</route>

		<route id="bulkStockUpdate">
			<from uri="direct:bulkStockUpdate" />
			<process ref="loadStockUpdateFeeds" />
			<when>
				<simple>${exchangeProperty.feedHasSKUs} == true</simple>
				<process ref="loadInventoryForStockUpdate" />
				<when>
					<simple>${exchangeProperty.isEligibleToProceed} == true</simple>
					<split parallelProcessing="false">
						<simple>${body}</simple>
						<log message="${exchangeProperty.isEligibleToProceed}"></log>
						<process ref="initCountryBasedInventories"></process>
						<to uri="direct:bulkStockUpdateByPage" />
					</split>
				</when>
			</when>
		</route>

		<route id="bulkStatusUpdate">
			<from uri="direct:bulkStatusUpdate" />
			<process ref="loadBatchStatusUpdateFeeds" />
			<choice>
				<when>
					<simple>${exchangeProperty.feedHasSKUs} == true</simple>
					<process ref="loadInventoryWithSellerSKU" />
					<when>
						<simple>${exchangeProperty.isEligibleToProceed} == true</simple>
						<split parallelProcessing="false">
							<simple>${body}</simple>
							<process ref="initUpdateStatusRequest" />
							<choice>
								<when>
									<simple>${exchangeProperty.isEligibleToDeactiveProduct} == true</simple>
									<to uri="freemarker:classpath:templates/UpdateDeactiveStatus.ftl?contentCache=true" />
									<process ref="submitDeactiveStatusRequest" />
									<process ref="updateDeactivateStatusInDB" />
									<when>
										<simple>${exchangeProperty.isEligibleToUpdateProductMaster} == true</simple>
										<to uri="direct:updateProductMasterRoute" />
									</when>
								</when>
								<when>
									<simple>${exchangeProperty.skuDataMap.size} > 0</simple>
									<to uri="freemarker:classpath:templates/UpdateStatusRequest.ftl?contentCache=true" />
									<process ref="submitStatusUpdateRequest" />
									<when>
										<simple>${exchangeProperty.isPostingSuccess} == true</simple>
										<to uri="direct:updateInventoryAndPM" />
									</when>
								</when>
							</choice>
						</split>
						<loop>
							<simple>${exchangeProperty.sellerSKUFeedMap.size}</simple>
							<process ref="constructCustomSKUBatchMessage" />
							<when>
								<simple>${exchangeProperty.isEligibleToPublishBatchMsg} == true</simple>
								<to uri="direct:publishMessageToBatch" />
							</when>
							<when>
								<simple>${exchangeProperty.isEligibleToUpdateStock} == true</simple>
								<process ref="updateStockRequest" />
							</when>
						</loop>
					</when>
					<when>
						<simple>${exchangeProperty.isEligibleToProceed} == false and
							${exchangeProperty.isInventoryListEmpty} == true</simple>
						<process ref="constructCustomSKUNotFound" />
						<to uri="direct:prepareBatchStatusUpdate" />
					</when>
				</when>
			</choice>
		</route>

		<route id="updateInventoryAndPM">
			<from uri="direct:updateInventoryAndPM" />
			<process ref="processUpdateChildStatus" />
			<split parallelProcessing="false">
				<simple>${body}</simple>
				<process ref="updateIndividualSKUDBQuery" />
				<to uri="mongodb:mongoInventoryBean?database={{mongo.inventory.database}}&amp;collection=inventory&amp;operation=update" />
			</split>
			<when>
				<simple>${exchangeProperty.hasChildVariants} == true</simple>
				<process ref="checkIsEligibleToUpdateParentStatus" />
				<when>
					<simple>${exchangeProperty.isEligibleToUpdateParentStatus} == true</simple>
					<to uri="mongodb:mongoInventoryBean?database={{mongo.inventory.database}}&amp;collection=inventory&amp;operation=update" />
				</when>
			</when>
			<when>
				<simple>${exchangeProperty.isEligibleToUpdateProductMaster} == true</simple>
				<to uri="direct:updateProductMasterRoute" />
			</when>
		</route>

		<route id="prepareBatchStatusUpdate">
		<from uri="direct:prepareBatchStatusUpdate" />
			<setProperty propertyName="requestType">
				<simple>batchStatusUpdate</simple>
			</setProperty>
			<when>
				<simple>${exchangeProperty.isCustomSKUsNotFound} == true</simple>
				<loop>
					<simple>${exchangeProperty.customSKUNotMessages.size}</simple>
					<setHeader headerName="isCustomSKUNotFoundMessage">
						<constant>true</constant>
					</setHeader>
					<process ref="prepareNotFoundBatchMessage" />
					<to uri="direct:publishMessageToBatch" />
				</loop>
			</when>
		</route>

    </routeContext>
</beans>