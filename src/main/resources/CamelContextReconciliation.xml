<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:context="http://www.springframework.org/schema/context" xmlns:cxf="http://camel.apache.org/schema/cxf"
	xmlns:jaxrs="http://cxf.apache.org/jaxrs"
	xsi:schemaLocation="
       http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
       http://camel.apache.org/schema/cxf http://camel.apache.org/schema/cxf/camel-cxf.xsd
       http://cxf.apache.org/jaxrs http://cxf.apache.org/schemas/jaxrs.xsd
       http://camel.apache.org/schema/spring http://camel.apache.org/schema/spring/camel-spring.xsd
       ">

	<bean id="initReconciliation" class="com.sellinall.lazada.init.InitReconciliation" />
	<bean id="checkReconcileTimeRange" class="com.sellinall.lazada.init.CheckReconcileTimeRange" />
	<bean id="initProcessReconcileData" class="com.sellinall.lazada.init.InitProcessReconcileData" />
	
	<bean id="pullReconciledFromSite" class="com.sellinall.lazada.requests.PullReconciledFromSite" />
		
	<bean id="loadOrderByOrderNumber" class="com.sellinall.lazada.db.LoadOrderByOrderNumber" />
	<bean id="processReconciliationOrderItems" class="com.sellinall.lazada.response.ProcessReconciliationOrderItems" />

	<bean id="constructPNQMessageForReconciliation" class="com.sellinall.lazada.message.ConstructPNQMessageForReconciliation" />
	<bean id="constructBatchMessageForReconciliation" class="com.sellinall.lazada.message.ConstructBatchMessageForReconciliation" />

	<bean id="validateSettlementSheet" class="com.sellinall.lazada.process.ValidateSettlementSheet" />
	<bean id="initGetSettlement" class="com.sellinall.lazada.init.InitializeGetSettlement" />
	<bean id="initGetSettlementSummaryRequest" class="com.sellinall.lazada.requests.InitGetSettlementSummaryRequest" />
	<bean id="initGetSettlementDetailsRequest" class="com.sellinall.lazada.requests.InitGetSettlementDetailsRequest" />
	<bean id="processSettlementDetailsResponse" class="com.sellinall.lazada.response.ProcessSettlementDetailsResponse" />
	<bean id="constructMessageForFinance" class="com.sellinall.lazada.message.ConstructMessageForFinance" />

	<!-- this is an included XML file where we only the the routeContext -->
	<routeContext id="reconciliationRoutes" xmlns="http://camel.apache.org/schema/spring">
		<route id="reconciliation">
			<from uri="direct:reconciliation" />
			<process ref="initReconciliation" />
			<process ref="loadUserDataByNicknameId" />
			<to uri="direct:pullOrdersFromSheet" />
			<to uri="direct:processReconciliationOrders" />
		</route>

		<route id="processReconciliationOrders">
			<from uri="direct:processReconciliationOrders" />
			<process ref="validateSettlementSheet" />
			<!-- All related orders will processed inside the class  -->
			<choice>
			    <when>
			        <simple>${exchangeProperty.failureReason} == ""</simple>
			        <process ref="processReconciliationOrderItems" />
			        <split parallelProcessing="false">
			            <simple>${body}</simple>
			            <process ref="loadOrderByOrderNumber" />
			            <when>
			                <simple>${exchangeProperty.isOrderExist} == true</simple>
			                <to uri="direct:publishPNQMessageForReconciliation" />
			            </when>
			            <to uri="direct:publishBatchMessageForReconciliation" />
			        </split>
			    </when>
			    <otherwise>
			        <to uri="direct:publishBatchMessageForReconciliation" />
			    </otherwise>
			</choice>
		</route>

		<route id="pullOrdersFromSheet">
			<from uri="direct:pullOrdersFromSheet" />
				<setHeader headerName="CamelHttpMethod">
					<constant>GET</constant>
				</setHeader>
				<setBody>
					<simple>null</simple>
				</setBody>
				<recipientList>
					<simple>
						${exchangeProperty.reconciliationFileURL}?throwExceptionOnFailure=false
					</simple>
				</recipientList>
				<unmarshal>
					<csv />
				</unmarshal>
				<setProperty propertyName="orderList">
					<simple>${body}</simple>
				</setProperty>
				<setProperty propertyName="totalEntries">
					<simple>${body.size}--</simple>
				</setProperty>
		</route>

		<route id="publishPNQMessageForReconciliation">
			<from uri="direct:publishPNQMessageForReconciliation" />
			<process ref="constructPNQMessageForReconciliation" />
			<setHeader headerName="rabbitmq.ROUTING_KEY">
				<constant>partnerNotifKey</constant>
			</setHeader>
			<setHeader headerName="rabbitmq.DELIVERY_MODE">
				<constant>2</constant>
			</setHeader>
			<convertBodyTo type="java.lang.String" />
			<to
				uri="rabbitmq://{{partnerNotif.host}}:{{partnerNotif.tx.port}}/partnerNotifExchange?connectionFactory=#txPartnerNotifFactory&amp;exchangeType=topic&amp;autoDelete=false&amp;durable=true&amp;declare=false" />
		</route>
		
		<route id="publishBatchMessageForReconciliation">
			<from uri="direct:publishBatchMessageForReconciliation" />
			<process ref="constructBatchMessageForReconciliation" />
			<setHeader headerName="rabbitmq.ROUTING_KEY">
				<constant>batchProcessorKey</constant>
			</setHeader>
			<setHeader headerName="rabbitmq.DELIVERY_MODE">
				<constant>2</constant>
			</setHeader>
			<convertBodyTo type="java.lang.String" />
			<to
				uri="rabbitmq://{{batchProcessor.host}}:{{batchProcessor.tx.port}}/batchProcessorExchange?connectionFactory=#txbatchProcessorFactory&amp;exchangeType=topic&amp;autoDelete=false&amp;durable=true&amp;declare=false" />
		</route>
		
		<route id="pullReconcilation">
			<from uri="direct:pullReconcilation" />
			<process ref="checkReconcileTimeRange" />
			<when>
				<simple>${exchangeProperty.isDateWithinReconcileLimit} == true</simple>
				<process ref="pullReconciledFromSite" />
				<when>
					<simple>${exchangeProperty.reconcileHasData} == true</simple>
					<to uri="direct:processReconcileData" />
				</when>
			</when>
		</route>
		
		<route id="processReconcileData">
			<from uri="direct:processReconcileData" />
			<loop doWhile="true">
				<simple>${exchangeProperty.isLastRow} == false</simple>
				<!-- All related orders will processed inside the class  -->
				<process ref="initProcessReconcileData" />
				<process ref="loadOrderByOrderNumber" />
				<when>
					<simple>${exchangeProperty.isOrderExist} == true</simple>
					<to uri="direct:publishPNQMessageForReconciliation" />
				</when>
			</loop>
		</route>

		<route id="getSettlementSummary">
			<from uri="direct:getSettlementSummary" />
			<process ref="initGetSettlement" />
			<process ref="loadUserDataByNicknameId" />
			<when>
				<simple>${exchangeProperty.getAccessToken} == true</simple>
				<to uri="direct:getAccessToken" />
			</when>
			<process ref="initGetSettlementSummaryRequest" />
			<process ref="constructMessageForFinance" />
			<to uri="direct:publishMessageToFinanceQueue" />
		</route>

		<route id="getSettlementDetails">
			<from uri="direct:getSettlementDetails" />
			<process ref="initGetSettlement" />
			<process ref="loadUserDataByNicknameId" />
			<when>
				<simple>${exchangeProperty.getAccessToken} == true</simple>
				<to uri="direct:getAccessToken" />
			</when>
			<loop doWhile="true">
				<simple>${exchangeProperty.isLastPage} == false</simple>
				<process ref="initGetSettlementDetailsRequest" />
				<process ref="processSettlementDetailsResponse" />
				<when>
					<simple>${exchangeProperty.isSuccessResponse} == true</simple>
					<setProperty propertyName="updateSettlementStatus">
						<simple>false</simple>
					</setProperty>
					<process ref="constructMessageForFinance" />
					<split parallelProcessing="true">
						<simple>${body}</simple>
						<to uri="direct:publishMessageToFinanceQueue" />
					</split>
				</when>
				<setProperty propertyName="updateSettlementStatus">
					<simple>true</simple>
				</setProperty>
				<process ref="constructMessageForFinance" />
				<to uri="direct:publishMessageToFinanceQueue" />
			</loop>
		</route>

		<route id="publishMessageToFinanceQueue">
			<from uri="direct:publishMessageToFinanceQueue" />
			<setHeader headerName="rabbitmq.ROUTING_KEY">
				<constant>finopsKey</constant>
			</setHeader>
			<setHeader headerName="rabbitmq.DELIVERY_MODE">
				<constant>2</constant>
			</setHeader>
			<convertBodyTo type="java.lang.String" />
			<to
				uri="rabbitmq://{{finopsserv.host}}:{{finopsserv.port}}/finopsExchange?connectionFactory=#finopsservTxConnectionFactory&amp;exchangeType=topic&amp;autoDelete=false&amp;durable=true&amp;declare=false" pattern="InOnly"  />
		</route>
	</routeContext>
</beans>