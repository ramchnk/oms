<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:context="http://www.springframework.org/schema/context" xmlns:cxf="http://camel.apache.org/schema/cxf"
	xmlns:jaxrs="http://cxf.apache.org/jaxrs"
	xsi:schemaLocation="
       http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
       http://camel.apache.org/schema/cxf http://camel.apache.org/schema/cxf/camel-cxf.xsd
       http://cxf.apache.org/jaxrs http://cxf.apache.org/schemas/jaxrs.xsd
       http://camel.apache.org/schema/spring http://camel.apache.org/schema/spring/camel-spring.xsd
       ">

	<bean id="initQcStatus" class="com.sellinall.lazada.init.InitQcStatus" />
	<bean id="initCheckQcBySKULimit" class="com.sellinall.lazada.init.InitCheckQcBySKULimit" />

	<bean id="processStatusSearchResult" class="com.sellinall.lazada.process.ProcessStatusSearchResult" />

	<bean id="loadInventoryByStatus" class="com.sellinall.lazada.db.LoadInventoryByStatus" />
	<bean id="updateSKUQCStatus" class="com.sellinall.lazada.db.UpdateSKUQCStatus" />

	<bean id="submitGetQcStatusRequest" class="com.sellinall.lazada.requests.SubmitGetQcStatusRequest" />
	<bean id="getProductsFromSite" class="com.sellinall.lazada.requests.GetProductsFromSite" />
	<bean id="updateProductMasterRequest" class="com.sellinall.lazada.requests.UpdateProductMasterRequest" />
	<bean id="updateStockRequest" class="com.sellinall.lazada.requests.UpdateStockRequest" />
	
	<bean id="constructQcCheckMessage" class="com.sellinall.lazada.message.ConstructQcCheckMessage" />	

	<!-- this is an included XML file where we only the the routeContext -->
	<routeContext id="checkPendingStatusRoutes" xmlns="http://camel.apache.org/schema/spring">
			
		<route id="checkQcBySKULimit">
			<from uri="direct:checkQcBySKULimit" />
			<!-- Here we have 10 SKU's only  -->
			<process ref="initCheckQcBySKULimit"/>
			<process ref="loadUserDataByNicknameId" />
			<when>
			   <simple>${exchangeProperty.getAccessToken} == true</simple>
			   <to uri="direct:getAccessToken" />
			</when>
			<to uri="direct:callQCApiAndProcess" />
		</route>

		<route id="processQcStatusCheck">
			<from uri="direct:processQcStatusCheck" />
			<setHeader headerName="status">
				<constant>W</constant>
			</setHeader>
			<setHeader headerName="loadParentInventory">
				<constant>false</constant>
			</setHeader>
			<to uri="direct:loadInventoryByStatusAndProcess" />
			<when>
				<simple>${exchangeProperty.isInventoryResultEmpty} == false</simple>
				<split parallelProcessing="true">
					<method ref="splitterBean" method="splitRefrenceIDByLimit" />
					<to uri="direct:publishQcCheckMessage" />
				</split>
			</when>
		</route>
		
		<route id="callQCApiAndProcess" >
			<from uri="direct:callQCApiAndProcess" />
			<!-- <process ref="submitGetQcStatusRequest" /> -->
			<to uri="direct:processQCStatus" />
		</route>

		<route id="loadInventoryByStatusAndProcess">
			<from uri="direct:loadInventoryByStatusAndProcess" />
			<process ref="loadInventoryByStatus" />
			<process ref="processStatusSearchResult" />
		</route>

		<route id="processQCStatus">
			<from uri="direct:processQCStatus" />
			<!-- TODO: remove commented line, once qc polling issue resolved -->
			<!-- <process ref="initQcStatus" />
			<when>
				<simple>${exchangeProperty.approvedRefrenceIDList} != null</simple>-->
				<setProperty propertyName="inventoryFilter">
					<constant>deleted</constant>
				</setProperty>
				<process ref="getProductsFromSite" />
			<!-- </when>
			<when>
				<simple>${exchangeProperty.missedSKUinQCPolling} != null</simple>-->
				<setProperty propertyName="inventoryFilter">
					<constant>all</constant>
				</setProperty>
				<process ref="getProductsFromSite" />
			<!-- </when> -->
			<when>
				<simple>${exchangeProperty.isEligibleToUpdateProductMaster} == true</simple>
				<setProperty propertyName="inventoryUrl">
					<simple>{{inventory.endpoint}}</simple>
				</setProperty>
				<process ref="updateProductMasterRequest" />
			</when>
			<when>
				<simple>${exchangeProperty.isEligibleToUpdateQCStatus} == true</simple>
				<to uri="direct:updateProductQcStatus" />
			</when>
		</route>

		<route id="updateProductQcStatus">
			<from uri="direct:updateProductQcStatus" />
			<split parallelProcessing="true">
				<simple>${body}</simple>
				<process ref="updateSKUQCStatus" />
				<when>
					<simple>${body}</simple>
					<to
						uri="mongodb:mongoInventoryBean?database={{mongo.inventory.database}}&amp;collection=inventory&amp;operation=update" />
				</when>
			</split>
				<when>
				    <simple>${exchangeProperty.isEligibleToUpdateStock} == true</simple>
				    <process ref="updateStockRequest" />
				</when>
		</route>

		<route id="processFailureUpdateItems" >
			<from uri="direct:processFailureUpdateItems" />
			<setHeader headerName="updateFailureReason">
				<constant>communication_failure</constant>
			</setHeader>
			<to uri="direct:loadInventoryByStatusAndProcess" />
			<when>
				<simple>${exchangeProperty.isInventoryResultEmpty} == false</simple>
				<setBody>
					<simple>${exchangeProperty.SKUList}</simple>
				</setBody>
				<split parallelProcessing="true">
					<simple>${body}</simple>
					<to uri="freemarker:classpath:templates/UpdateItem.ftl?contentCache=true" />
					<convertBodyTo type="java.lang.String" />
					<process ref="convertToJSON" />
					<setProperty propertyName="requestType">
						<constant>updateItem</constant>
					</setProperty>
					<to uri="direct:startUpdate" />
				</split>
			</when>
		</route>
		
		<route id="publishQcCheckMessage" >
			<from uri="direct:publishQcCheckMessage" />
			<process ref="constructQcCheckMessage"/>
			<setHeader headerName="rabbitmq.ROUTING_KEY">
				<constant>lazadaListingKey</constant>
			</setHeader>
			<setHeader headerName="rabbitmq.DELIVERY_MODE">
				<constant>2</constant>
			</setHeader>
			<convertBodyTo type="java.lang.String" />
			<to
				uri="rabbitmq://{{lazada.host}}:{{lazada.tx.port}}/lazadaListingExchange?connectionFactory=#txLazadaFactory&amp;exchangeType=topic&amp;autoDelete=false&amp;durable=true&amp;declare=false" pattern="InOnly"  />
		</route>
	</routeContext>
</beans>