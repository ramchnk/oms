<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:context="http://www.springframework.org/schema/context" xmlns:cxf="http://camel.apache.org/schema/cxf"
	xmlns:jaxrs="http://cxf.apache.org/jaxrs"
	xsi:schemaLocation="
       http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
       http://camel.apache.org/schema/cxf http://camel.apache.org/schema/cxf/camel-cxf.xsd
       http://cxf.apache.org/jaxrs http://cxf.apache.org/schemas/jaxrs.xsd
       http://camel.apache.org/schema/spring http://camel.apache.org/schema/spring/camel-spring.xsd
       ">
	
	<bean id="startAuthRoute" class="com.sellinall.lazada.init.StartAuthRoute" />
	<bean id="initGetAccessToken" class="com.sellinall.lazada.init.InitGetAccessToken" />
	
	<bean id="checkAccountChannelStatus" class="com.sellinall.lazada.db.CheckAccountChannelStatus" />
	<bean id="initializeProcessOrders" class="com.sellinall.lazada.init.InitializeProcessOrders" />

	
	<bean id="userDBQuery" class="com.sellinall.lazada.db.UserDBQuery" />
	
	<bean id="addAccount" class="com.sellinall.lazada.db.AddAccount" />
	
	<bean id="updateAccessToken" class="com.sellinall.lazada.db.UpdateAccessToken" />
	
	<bean id="splitterBean" class="com.sellinall.lazada.splitter.SplitterBean" />

	<bean id="aggregatorStrategy" class="com.sellinall.lazada.aggregator.AggregatorStrategy" />
	
	<bean id="buildListOrdersReq" class="com.sellinall.lazada.requests.BuildListOrdersRequest" />
	<bean id="processListOrdersResponse" class="com.sellinall.lazada.response.ProcessListOrdersResponse" />
	
	<bean id="processExternalOrderResponse" class="com.sellinall.lazada.response.ProcessExternalOrderResponse" />
	
	<bean id="getAccessToken" class="com.sellinall.lazada.requests.GetAccessToken" />
	<bean id="refreshAccessToken" class="com.sellinall.lazada.requests.RefreshAccessToken" />	

	<bean id="environmentVariablesConfiguration" class="org.jasypt.encryption.pbe.config.EnvironmentStringPBEConfig">
		<property name="algorithm" value="PBEWithMD5AndDES" />
		<property name="passwordEnvName" value="APP_ENCRYPTION_PASSWORD" />
	</bean>
	<bean id="configurationEncryptor" class="org.jasypt.encryption.pbe.StandardPBEStringEncryptor">
		<property name="config" ref="environmentVariablesConfiguration" />
	</bean>
	<bean class="org.jasypt.spring31.properties.EncryptablePropertyPlaceholderConfigurer">
		<constructor-arg ref="configurationEncryptor" />
		<property name="locations">
			<value>classpath:config.properties</value>
		</property>
	</bean>
	<bean id="properties" class="org.apache.camel.component.properties.PropertiesComponent">
		<property name="location" value="classpath:config.properties" />
	</bean>
	
	<!-- mongo db bean -->
	<bean id="mongoInventoryBean" class="com.mongodb.MongoClient">
		<constructor-arg index="0">
			<bean class="com.mongodb.MongoClientURI">
				<constructor-arg index="0" value="${mongo.inventory.uri}" />
			</bean>
		</constructor-arg>
	</bean>

	<!-- <import resource="CamelContextPolling.xml" />
	

	 The camel route context -->
	<camelContext id="camel" xmlns="http://camel.apache.org/schema/spring">
		
		<route id="startAuth">
			<from uri="direct:startAuth"/>
			<process ref="startAuthRoute" />
		</route>

		<route id="finishAuth">
			<from uri="direct:finishAuth" />			
			<process ref="getAccessToken" />
			<process ref="updateAccessToken" />
			<process ref="addAccount" />
		</route>
		

		<route id="getAccessToken">
			<from uri="direct:getAccessToken" />
			<process ref="initGetAccessToken" />
			<when>
				<simple>${exchangeProperty.refreshAccessToken} == true</simple>
				<process ref="refreshAccessToken" />
				<when>
					<simple>${exchangeProperty.stopProcess} == null</simple>
					<process ref="updateAccessToken" />
				</when>
			</when>
		</route>
		
		<route id="pullOders">
			<from uri="direct:pullOders" />
			<process ref="userDBQuery" />
			<process ref="checkAccountChannelStatus" />
			<setBody>
				<simple>${exchangeProperty.UserDetails}</simple>
			</setBody>
			<split parallelProcessing="true">
				<method ref="splitterBean" method="splitUser" />
					<to uri="direct:processOrders" />
			</split>
			<process ref="processExternalOrderResponse" />
		</route>
		
		<route id="processOrders">
			<from uri="direct:processOrders" />
			<process ref="initializeProcessOrders" />
			<when>
				<simple>${exchangeProperty.getAccessToken} == true</simple>
				<to uri="direct:getAccessToken" />
			</when>
			<loop doWhile="true">
				<simple>${exchangeProperty.hasMoreRecords} == true</simple>
				<process ref="buildListOrdersReq" />
				<when>
					<simple>${exchangeProperty.isOrderPollingScuccess} == true</simple>
					<process ref="processListOrdersResponse" />
				</when>
			</loop>
		</route>
		
	</camelContext>
</beans>
