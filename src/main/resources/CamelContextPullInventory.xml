<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:context="http://www.springframework.org/schema/context" xmlns:cxf="http://camel.apache.org/schema/cxf"
	xmlns:jaxrs="http://cxf.apache.org/jaxrs"
	xsi:schemaLocation="
       http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
       http://camel.apache.org/schema/cxf http://camel.apache.org/schema/cxf/camel-cxf.xsd
       http://cxf.apache.org/jaxrs http://cxf.apache.org/schemas/jaxrs.xsd
       http://camel.apache.org/schema/spring http://camel.apache.org/schema/spring/camel-spring.xsd
       ">
	<bean id="initializePullInventoryRoute" class="com.sellinall.lazada.init.InitializePullInventoryRoute" />
	<bean id="initializeUnlinkedInventoryRoute" class="com.sellinall.lazada.init.InitializeUnlinkedInventoryRoute" />
	<bean id="initializeLinkedInventoryRoute" class="com.sellinall.lazada.init.InitializeLinkedInventoryRoute" />
	<bean id="loadUserDataByNicknameId" class="com.sellinall.lazada.db.LoadUserDataByNicknameId" />
	<bean id="loadInventoryCount" class="com.sellinall.lazada.db.LoadInventoryCount" />
	<bean id="loadCustomSKUAutoLink" class="com.sellinall.lazada.db.LoadCustomSKUAutoLink" />
	<bean id="constructPagingMessage" class="com.sellinall.lazada.message.ConstructPagingMessage" />
	<bean id="initializeProcessPullInventoryRoute" class="com.sellinall.lazada.init.InitializeProcessPullInventoryRoute" />
	<bean id="initProcessInventoryItem" class="com.sellinall.lazada.init.InitProcessInventoryItem" />


	<bean id="pullInventoryFromSite" class="com.sellinall.lazada.requests.PullInventoryFromSite" />

	<bean id="processImageURL" class="com.sellinall.lazada.response.ProcessImageURL" />
	<bean id="processParentInventory" class="com.sellinall.lazada.response.ProcessParentInventory" />
	<bean id="processUnlinkedInventory" class="com.sellinall.lazada.response.ProcessUnlinkedInventory" />
	<bean id="processLinkedInventory" class="com.sellinall.lazada.response.ProcessLinkedInventory" />
	<bean id="proceesPullInventory" class="com.sellinall.lazada.response.ProceesPullInventory" />
	<bean id="upsertUnlinkedInventory" class="com.sellinall.lazada.db.UpsertUnlinkedInventory" />
	<bean id="processInventoryForAutoLinking" class="com.sellinall.lazada.db.ProcessInventoryForAutoLinking" />
	<bean id="loadInventoryForAutoLinking" class="com.sellinall.lazada.db.LoadInventoryForAutoLinking" />
	<bean id="checkIfItemExistsInUnlinked" class="com.sellinall.lazada.db.CheckIfItemExistsInUnlinked" />
	<bean id="processUnlinkedSearchResult" class="com.sellinall.lazada.db.ProcessUnlinkedSearchResult" />
	<bean id="constructMessageForBatch" class="com.sellinall.lazada.message.ConstructMessageForBatch" />
	<bean id="buildMudraHeader" class="com.sellinall.lazada.requests.BuildMudraHeader" />
	<bean id="getItemDetails" class="com.sellinall.lazada.requests.GetItemDetails" />
	<bean id="processImportDocumentResponse" class="com.sellinall.lazada.response.ProcessImportDocumentResponse" />

	<!-- this is an included XML file where we only the the routeContext -->
	<routeContext id="pullInventoryRoutes" xmlns="http://camel.apache.org/schema/spring">
		<route id="pullInventory">
			<from uri="direct:pullInventory" />
			<!-- need to listen to event -->
			<process ref="initializePullInventoryRoute" />
			<process ref="loadUserDataByNicknameId" />
			<to uri="direct:loadInventoryCount" />
			<to uri="direct:processPullInventory" />
		</route>

		<route id="processPullInventory">
			<from uri="direct:processPullInventory" />
			<setHeader headerName="pullInventoryType">
				<constant>GET_ALL</constant>
			</setHeader>
			<when>
			   <simple>${exchangeProperty.getAccessToken} == true</simple>
			   <to uri="direct:getAccessToken" />
			</when>
			<process ref="pullInventoryFromSite" />
			<choice>
			<when>
				<simple>${exchangeProperty.isRetry} == true and ${exchangeProperty.stopRetryOnServiceTimeout} == false</simple>
				<to uri="direct:publishPagingMessage" />
			</when>
			<otherwise>
			<when>
				<simple>${exchangeProperty.responseSuccess} == false</simple>
					<choice>
						<when>
							<simple>${exchangeProperty.stopRetryOnServiceTimeout} == true</simple>
							<setHeader headerName="importStatus">
								<constant>COMPLETED_WITH_WARNING</constant>
							</setHeader>
						</when>
						<otherwise>
							<setHeader headerName="importStatus">
							   <constant>COMPLETED</constant>
							</setHeader>
						</otherwise>
					</choice>
					<to uri="direct:updateBatchProcessor" />
			</when>
			<when>
				<simple>${exchangeProperty.responseSuccess} == true</simple>
				<choice>
					<when>
						<simple>${exchangeProperty.individualSKUPerChannel} == true</simple>
							<to uri="direct:processIndividualSkuModelInventoryList" />
					</when>
					<otherwise>
						<loop>
							<simple>${exchangeProperty.totalItemsInCurrentPage}</simple>
							<to uri="direct:processInventoryItem" />
							<setProperty propertyName="itemListIndex">
							<simple>${exchangeProperty.itemListIndex}++</simple>
							</setProperty>
						</loop>
						<setProperty propertyName="pageNumber">
							<simple>${exchangeProperty.pageNumber}++</simple>
						</setProperty>
						<choice>
							<when>
								<simple>${exchangeProperty.isLastLoop} == true</simple>
								<setHeader headerName="importStatus">
									<constant>COMPLETED</constant>
								</setHeader>
								<to uri="direct:updateBatchProcessor" />
							</when>
							<otherwise>
								<setHeader headerName="importStatus">
									<constant>PROCESSING</constant>
								</setHeader>
								<to uri="direct:updateBatchProcessor" />
								<delay><constant>5000</constant></delay>
								<to uri="direct:publishPagingMessage" />
							</otherwise>
						</choice>
					</otherwise>
				</choice>
			</when>
		  </otherwise>
		</choice>
		</route>

		<route id="getProcessedItemIds">
			<from uri="direct:getProcessedItemIds" />
			<process ref="buildMudraHeader" />
			<doTry>
				<setHeader headerName="CamelHttpMethod">
					<constant>GET</constant>
				</setHeader>
				<recipientList>
					<simple>{{batch.endpoint}}/importinventory/${exchangeProperty.importRecordObjectId}</simple>
				</recipientList>
				<process ref="processImportDocumentResponse" />
				<doCatch>
					<exception>java.lang.Exception</exception>
					<setHeader headerName="exceptionMessage">
						<simple>${exception.stacktrace}</simple>
					</setHeader>
					<setHeader headerName="importStatus">
						<constant>COMPLETED_WITH_WARNING</constant>
					</setHeader>
					<to uri="direct:updateBatchProcessor" />
					<stop />
				</doCatch>
			</doTry>
		</route>

		<route id="processPullInventoryByPageRoute">
			<from uri="direct:processPullInventoryByPageRoute" />
			<process ref="initializeProcessPullInventoryRoute" />
			<process ref="loadUserDataByNicknameId" />
			<to uri="direct:getProcessedItemIds" />
			<to uri="direct:processPullInventory" />
		</route>

		<route id="processInventoryItem">
			<from uri="direct:processInventoryItem" />
			<!-- Temp fix. Need to put proper fix -->
			<process ref="getItemDetails" />
			<choice>
				<when><simple>${exchangeProperty.responseSuccess} == true</simple>
					<process ref="initProcessInventoryItem" />
					<choice>
						<when>
							<simple>${exchangeProperty.itemStatus} != 'deleted' and ${exchangeProperty.hasItemExists} == true</simple>
							<doTry>
								<to uri="direct:checkItemIsExistInInventory" />
								<to uri="direct:processLinkInventory" />
								<when>
									<simple>${exchangeProperty.isInventoryEmpty} == false and
										${exchangeProperty.itemIsExistInInventoryDetails} == true
									</simple>
									<to uri="direct:processLinkedInventoryUpdate" />
									<!-- <to uri="direct:publishToFB" /> -->
								</when>
								<doCatch>
									<exception>java.lang.Exception</exception>
									<handled>
										<constant>true</constant>
									</handled>
									<setHeader headerName="exceptionMessage">
										<simple>${exception.stacktrace}</simple>
									</setHeader>
									<setProperty propertyName="noOfItemSkipped">
										<simple>${exchangeProperty.noOfItemSkipped}++</simple>
									</setProperty>
								</doCatch>
							</doTry>
						</when>
						<otherwise>
							<setProperty propertyName="noOfItemSkipped">
								<simple>${exchangeProperty.noOfItemSkipped}++</simple>
							</setProperty>
						</otherwise>
					</choice>
				</when>
				<otherwise>
					<setProperty propertyName="noOfItemSkipped">
						<simple>${exchangeProperty.noOfItemSkipped}++</simple>
					</setProperty>
				</otherwise>
			</choice>
		</route>

		<route id="processLinkInventory">
			<from uri="direct:processLinkInventory" />
			<to uri="direct:unlinkedInventory" />
			<choice>
				<when>
					<simple>${exchangeProperty.isInventoryEmpty} == true</simple>
					<to
						uri="mongodb:mongoInventoryBean?database={{mongo.inventory.database}}&amp;collection=inventory&amp;operation=insert" />
					<setProperty propertyName="noOfItemLinked">
						<simple>${exchangeProperty.noOfItemLinked}++</simple>
					</setProperty>
					<setProperty propertyName="noOfItemCompleted">
						<simple>${exchangeProperty.noOfItemCompleted}++</simple>
					</setProperty>
				</when>
				<otherwise>
					<split parallelProcessing="true">
						<simple>${body}</simple>						
							<process ref="upsertUnlinkedInventory" />
							<to
								uri="mongodb:mongoInventoryBean?database={{mongo.inventory.database}}&amp;collection=unlinkedInventory&amp;operation=update" />
					</split>
					<setProperty propertyName="noOfItemCompleted">
						<simple>${exchangeProperty.noOfItemCompleted}++</simple>
					</setProperty>
					<setProperty propertyName="noOfItemUnLinked">
						<simple>${exchangeProperty.noOfItemUnLinked}++</simple>
					</setProperty>
				</otherwise>
			</choice>
		</route>

		<route id="unlinkedInventory">
			<from uri="direct:unlinkedInventory" />
			<process ref="initializeUnlinkedInventoryRoute" />
			<process ref="checkIfItemExistsInUnlinked" />
			<to
				uri="mongodb:mongoInventoryBean?database={{mongo.inventory.database}}&amp;collection=unlinkedInventory&amp;operation=findOneByQuery" />
			<process ref="processUnlinkedSearchResult" />			
			<process ref="processImageURL" />
			<process ref="processParentInventory" />
			<process ref="processUnlinkedInventory" />
		</route>

		<route id="updateBatchProcessor">
			<from uri="direct:updateBatchProcessor" />
			<process ref="constructMessageForBatch" />
			<setHeader headerName="rabbitmq.ROUTING_KEY">
				<constant>batchProcessorKey</constant>
			</setHeader>
			<setHeader headerName="rabbitmq.DELIVERY_MODE">
				<constant>2</constant>
			</setHeader>
			<convertBodyTo type="java.lang.String" />
			<to
				uri="rabbitmq://{{batchProcessor.host}}:{{batchProcessor.tx.port}}/batchProcessorExchange?connectionFactory=#txbatchProcessorFactory&amp;exchangeType=topic&amp;autoDelete=false&amp;durable=true&amp;declare=false" />
		</route>

		<route id="checkItemIsExistInInventory">
			<from uri="direct:checkItemIsExistInInventory" />
			<process ref="loadInventoryForAutoLinking" />
			<to
				uri="mongodb:mongoInventoryBean?database={{mongo.inventory.database}}&amp;collection=inventory&amp;operation=findAll" />
			<process ref="processInventoryForAutoLinking" />
			<when>
				<simple>${exchangeProperty.itemIsExistInInventoryDetails} == false</simple>
				<process ref="loadCustomSKUAutoLink" />
				<to uri="mongodb:mongoInventoryBean?database={{mongo.inventory.database}}&amp;collection=inventory&amp;operation=findAll" />
				<process ref="processInventoryForAutoLinking" />
			</when>
		</route>

		<route id="processLinkedInventoryUpdate">
			<from uri="direct:processLinkedInventoryUpdate" />
			<to uri="freemarker:classpath:templates/LinkInventory.ftl?contentCache=true" />
				<process ref="buildMudraHeader" />
				<recipientList>
					<simple>{{inventory.endpoint}}/unlinkedInventory/item/${exchangeProperty.SKU}</simple>
				</recipientList>
			<setProperty propertyName="noOfItemLinked">
				<simple>${exchangeProperty.noOfItemLinked}++</simple>
			</setProperty>
			<setProperty propertyName="noOfItemUnLinked">
				<simple>${exchangeProperty.noOfItemUnLinked}--</simple>
			</setProperty>
		</route>

		<route id="loadInvenotryCount">
			<from uri="direct:loadInventoryCount" />
			<process ref="loadInventoryCount" />
			<choice>
				<when>
					<simple>${in.body} == 0</simple>
					<setProperty propertyName="isInventoryEmpty">
						<simple>true</simple>
					</setProperty>
				</when>
				<otherwise>
					<setProperty propertyName="isInventoryEmpty">
						<simple>false</simple>
					</setProperty>
				</otherwise>
			</choice>
		</route>
		
		<route id="initiateDefaultCounters" >
			<from uri="direct:initiateDefaultCounters" />
			<setProperty propertyName="noOfItemLinked">
				<simple>0</simple>
			</setProperty>
			<setProperty propertyName="noOfItemUnLinked">
				<simple>0</simple>
			</setProperty>
			<setProperty propertyName="noOfItemCompleted">
				<simple>0</simple>
			</setProperty>
			<setProperty propertyName="noOfItemSkipped">
				<simple>0</simple>
			</setProperty>
		</route>

		<route id="publishPageProcessingMessage">
			<from uri="direct:publishPagingMessage" />
			<process ref="constructPagingMessage" />
			<setHeader headerName="rabbitmq.ROUTING_KEY">
				<simple>${exchangeProperty.lazadaRoutingKey}</simple>
			</setHeader>
			<setHeader headerName="rabbitmq.DELIVERY_MODE">
				<constant>2</constant>
			</setHeader>
			<convertBodyTo type="java.lang.String" />
			<to
				uri="rabbitmq://{{lazada.host}}:{{lazada.tx.port}}/lazadaListingExchange?connectionFactory=#txLazadaFactory&amp;exchangeType=topic&amp;autoDelete=false&amp;durable=true&amp;declare=false" pattern="InOnly"  />
		</route>
	</routeContext>
</beans>