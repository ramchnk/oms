<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:context="http://www.springframework.org/schema/context" xmlns:cxf="http://camel.apache.org/schema/cxf"
	xmlns:jaxrs="http://cxf.apache.org/jaxrs"
	xsi:schemaLocation="
       http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
       http://camel.apache.org/schema/cxf http://camel.apache.org/schema/cxf/camel-cxf.xsd
       http://cxf.apache.org/jaxrs http://cxf.apache.org/schemas/jaxrs.xsd
       http://camel.apache.org/schema/spring http://camel.apache.org/schema/spring/camel-spring.xsd
       ">

	<bean id="initProcessLazadaNotification" class="com.sellinall.lazada.init.InitProcessLazadaNotification" />
	<bean id="initGetOrderItems" class="com.sellinall.lazada.init.InitGetOrderItems" />
	<bean id="initProcessPendingNotifications" class="com.sellinall.lazada.init.InitProcessPendingNotifications" />
	<bean id="initConversationDetails" class="com.sellinall.lazada.init.InitConversationDetails" />
	<bean id="initRecallMessage" class="com.sellinall.lazada.init.InitRecallMessage" />
	<bean id="initUpdateSessionAsRead" class="com.sellinall.lazada.init.InitUpdateSessionAsRead" />

	<bean id="getOrderDetail" class="com.sellinall.lazada.requests.GetOrderDetail" />
	<bean id="updateSessionAsRead" class="com.sellinall.lazada.requests.UpdateSessionAsRead"/>

	<bean id="constructDelayNotificationMessage" class="com.sellinall.lazada.message.ConstructDelayNotificationMessage" />
	<bean id="constructInquiryMessage" class="com.sellinall.lazada.message.ConstructInquiryMessage" />
	<bean id="getConversationDetails" class="com.sellinall.lazada.requests.GetConversationDetails" />
	<bean id="loadSellerAccountDetails" class="com.sellinall.lazada.db.LoadSellerAccountDetails" />
	<bean id="insertNotificationIntoDB" class="com.sellinall.lazada.db.InsertNotificationIntoDB" />
	<bean id="loadPendingNotifications" class="com.sellinall.lazada.db.LoadPendingNotifications" />
	<bean id="removeProcessedNotificationsFromDB" class="com.sellinall.lazada.db.RemoveProcessedNotificationsFromDB" />
	<bean id="recallConversation" class="com.sellinall.lazada.requests.RecallConversation" />

	<routeContext id="notificationRoutes" xmlns="http://camel.apache.org/schema/spring">
		<route id="processNotificationMessage">
			<from uri="direct:processNotificationMessage" />
			<process ref="initProcessLazadaNotification" />
			<choice>
				<when>
					<simple>${exchangeProperty.notificationType} == "order"</simple>
					<to uri="direct:insertNotificationIntoDB" />
				</when>
				<when>
					<simple>${exchangeProperty.notificationType} == "chat"</simple>
					<to uri="direct:processChatNotification" />
				</when>
			</choice>
		</route>

		<route id="processPendingNotification">
			<from uri="direct:processPendingNotification" />
			<when>
				<simple>${exchangeProperty.accountNumber} == null</simple>
				<!-- stopping common polling message, will remove this in next commit - 26-04-2022 -->
				<stop />
			</when>
			<doTry>
				<to uri="direct:checkAccountHasEligibleToSync" />
				<setBody>
					<simple>${exchangeProperty.UserDetails}</simple>
				</setBody>
				<split parallelProcessing="true">
					<method ref="splitterBean" method="splitUser" />
					<process ref="initializeAccountSplitter" />
					<to uri="direct:getAccessToken" />
					<when>
						<simple>${exchangeProperty.accessToken} != null</simple>
						<process ref="loadPendingNotifications" />
						<split parallelProcessing="false">
							<simple>${body}</simple>
							<to uri="direct:processOrderNotification" />
						</split>
						<process ref="updateUserDBLastScannedTime" />
					</when>
				</split>
				<doCatch>
					<exception>java.lang.Exception</exception>
					<setHeader headerName="processOrderNotification">
						<simple>${exception.stacktrace}</simple>
					</setHeader>
					<process ref="handleException" />
				</doCatch>
				<doFinally>
					<when>
						<simple>${exchangeProperty.accountHasEligiblityToSync} == true</simple>
						<to uri="direct:publishDelayNotificationMessage" />
					</when>
				</doFinally>
			</doTry>
		</route>

		<route id="insertNotificationIntoDB">
			<from uri="direct:insertNotificationIntoDB" />
			<process ref="loadSellerAccountDetails" />
			<when>
				<simple>${exchangeProperty.isEligibleToProceed} == true</simple>
				<process ref="insertNotificationIntoDB" />
			</when>
		</route>

		<route id="processOrderNotification">
			<from uri="direct:processOrderNotification" />
			<process ref="initProcessPendingNotifications" />
			<process ref="initializeProcessOrders" />
			<process ref="getOrderDetail" />
			<when>
				<simple>${exchangeProperty.responseSuccess} == true</simple>
				<process ref="initGetOrderItems" />
				<when>
					<simple>${exchangeProperty.responseSuccess} == true</simple>
					<to uri="direct:processOrderItems" />
					<when>
						<simple>${exchangeProperty.needToUpdateDocumentUrl} == true</simple>
						<to uri="direct:getShippingLabel" />
					</when>
					<to uri="direct:constructPNQMessage" />
					<to uri="direct:removeProcessedNotifications" />
				</when>
			</when>
		</route>

		<route id="removeProcessedNotifications">
			<from uri="direct:removeProcessedNotifications" />
			<process ref="removeProcessedNotificationsFromDB" />
		</route>

		<route id="processChatNotification">
			<from uri="direct:processChatNotification" />
			<choice>
				<when>
					<simple>${exchangeProperty.syncType} == "SESSION_UPDATE"</simple>
					<process ref="constructUnreadMessageCount" />
				</when>
				<otherwise>
					<process ref="constructInquiryMessage" />
				</otherwise>
			</choice>
			<when>
				<simple>${exchangeProperty.isEligibleToPublishMsg} == true</simple>
				<to uri="direct:publishMessageToCustomerManagement" />
			</when>
		</route>

		<route id="publishMessageToCustomerManagement">
			<from uri="direct:publishMessageToCustomerManagement" />
			<setHeader headerName="rabbitmq.ROUTING_KEY">
				<constant>customerInquiryKey</constant>
			</setHeader>
			<setHeader headerName="rabbitmq.DELIVERY_MODE">
				<constant>2</constant>
			</setHeader>
			<convertBodyTo type="java.lang.String" />
			<to uri="rabbitmq://{{customer.host}}:{{customer.port}}/customerInquiryExchange?connectionFactory=#customerTxConnectionFactory&amp;exchangeType=topic&amp;autoDelete=false&amp;durable=true&amp;declare=false" />
		</route>

		<route id="publishDelayNotificationMessage">
			<from uri="direct:publishDelayNotificationMessage" />
			<process ref="constructDelayNotificationMessage" />
			<setHeader headerName="rabbitmq.ROUTING_KEY">
				<constant>lazadaNotificationDelayKey</constant>
			</setHeader>
			<setHeader headerName="rabbitmq.DELIVERY_MODE">
				<constant>2</constant>
			</setHeader>
			<convertBodyTo type="java.lang.String" />
			<to uri="rabbitmq://{{lazada.host}}:{{lazada.tx.port}}/lazadaListingExchange?connectionFactory=#txLazadaFactory&amp;exchangeType=topic&amp;autoDelete=false&amp;durable=true&amp;declare=false" pattern="InOnly"  />
		</route>

		<route id="getConversationDetails">
			<from uri="direct:getConversationDetails" />
			<process ref="initConversationDetails" />
			<process ref="loadUserDataByNicknameId" />
			<when>
				<simple>${exchangeProperty.getAccessToken} == true</simple>
				<to uri="direct:getAccessToken" />
				<process ref="getConversationDetails"/>
			</when>
		</route>

		<route id="recallMessage">
			<from uri="direct:recallMessage" />
			 <process ref="initRecallMessage" />
			 <process ref="loadUserDataByNicknameId" />
			 <when>
				<simple>${exchangeProperty.getAccessToken} == true</simple>
				<to uri="direct:getAccessToken" />
				<process ref="recallConversation"/>
			</when>
		</route>

		<route id="updateSessionAsRead">
			<from uri="direct:updateSessionAsRead" />
			 <process ref="initUpdateSessionAsRead" />
			 <process ref="loadUserDataByNicknameId" />
			 <when>
				<simple>${exchangeProperty.getAccessToken} == true</simple>
				<to uri="direct:getAccessToken" />
				<process ref="updateSessionAsRead" />
			</when>
		</route>
	</routeContext>
</beans>